// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductOrderApi.Data;

#nullable disable

namespace ProductOrderApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250922221919_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductOrderApi.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ProductOrderApi.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ProductOrderApi.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ProductOrderApi.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Small widget",
                            ImageUrl = "/images/widget-a.jpg",
                            Price = 9.99m,
                            Title = "Widget A"
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Medium widget",
                            ImageUrl = "/images/widget-b.jpg",
                            Price = 19.99m,
                            Title = "Widget B"
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Large widget",
                            ImageUrl = "/images/widget-c.jpg",
                            Price = 29.99m,
                            Title = "Widget C"
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Useful gadget",
                            ImageUrl = "/images/gadget-a.jpg",
                            Price = 14.99m,
                            Title = "Gadget A"
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "Advanced gadget",
                            ImageUrl = "/images/gadget-b.jpg",
                            Price = 24.99m,
                            Title = "Gadget B"
                        },
                        new
                        {
                            ProductId = 6,
                            Description = "Handy tool",
                            ImageUrl = "/images/tool-a.jpg",
                            Price = 12.99m,
                            Title = "Tool A"
                        },
                        new
                        {
                            ProductId = 7,
                            Description = "Professional tool",
                            ImageUrl = "/images/tool-b.jpg",
                            Price = 34.99m,
                            Title = "Tool B"
                        },
                        new
                        {
                            ProductId = 8,
                            Description = "Cool accessory",
                            ImageUrl = "/images/accessory-a.jpg",
                            Price = 7.99m,
                            Title = "Accessory A"
                        },
                        new
                        {
                            ProductId = 9,
                            Description = "Premium accessory",
                            ImageUrl = "/images/accessory-b.jpg",
                            Price = 17.99m,
                            Title = "Accessory B"
                        },
                        new
                        {
                            ProductId = 10,
                            Description = "Luxury accessory",
                            ImageUrl = "/images/accessory-c.jpg",
                            Price = 27.99m,
                            Title = "Accessory C"
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Models.Order", b =>
                {
                    b.HasOne("ProductOrderApi.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProductOrderApi.Models.OrderItem", b =>
                {
                    b.HasOne("ProductOrderApi.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductOrderApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductOrderApi.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ProductOrderApi.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
